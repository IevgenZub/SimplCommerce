@model SimplCommerce.Module.Catalog.ViewModels.ProductThumbnail
@using System.Globalization

@{
    var durationTime = string.Format("{0:00}", Model.DurationHours) + "h " + string.Format("{0:00}", Model.DurationMinutes) + "m";

    string returnDurationTime = string.Empty;
    if (Model.IsRoundTrip)
    {
        returnDurationTime = string.Format("{0:00}", Model.ReturnDurationHours) + "h " + string.Format("{0:00}", Model.ReturnDurationMinutes) + "m";
    }

    var selectedFlightId = (Model.Details.HasVariation && Model.Details.Variations.Any()) ? Model.Details.Variations.Aggregate((c, d) => c.CalculatedProductPrice.Price < d.CalculatedProductPrice.Price ? c : d).Id : Model.Id;
    var selectedPrice = Model.Details.HasVariation ? Model.Details.Variations.First(v => v.Id == selectedFlightId).CalculatedProductPrice.Price : Model.CalculatedProductPrice.Price;

    var qtyAdult = 1;
    if (Context.Request.Query.Any(q => q.Key == "A_P" && !string.IsNullOrEmpty(q.Value)))
    {
        qtyAdult = Convert.ToInt16(Context.Request.Query["A_P"]);
    }

    var qtyChild = 0;
    if (Context.Request.Query.Any(q => q.Key == "C_P" && !string.IsNullOrEmpty(q.Value)))
    {
        qtyChild = Convert.ToInt16(Context.Request.Query["C_P"]);
    }

    var qtyBaby = 0;
    if (Context.Request.Query.Any(q => q.Key == "B_P" && !string.IsNullOrEmpty(q.Value)))
    {
        qtyBaby = Convert.ToInt16(Context.Request.Query["B_P"]);
    }

    selectedPrice = selectedPrice * qtyAdult + selectedPrice * qtyChild + Model.ChildPrice * qtyBaby;
    var isRus = CultureInfo.CurrentCulture.Name.ToLower() == "ru-ru";
    var departure = isRus ? Model.DepartureRus : Model.Departure;
    var landing = isRus ? Model.LandingRus : Model.Landing;
    var returnThumbnailUrl = string.IsNullOrEmpty(Model.ReturnThumbnailUrl) ? Model.ThumbnailUrl : Model.ReturnThumbnailUrl;

    var mergedProductId = string.IsNullOrEmpty(Model.MergedProductId) ? "0" : Model.MergedProductId;

    var minDeparture = string.Empty;
    var maxDeparture = string.Empty;
    var hasVariation = Model.Details.HasVariation;

    if (hasVariation)
    {
        minDeparture = Model.Details.Variations.Select(f => f.DepartureDate.Value.Date).DefaultIfEmpty(DateTime.Now).Min().ToShortDateString();
        maxDeparture = Model.Details.Variations.Select(f => f.DepartureDate.Value.Date).DefaultIfEmpty(DateTime.Now).Max().ToShortDateString();
    }
}

<div class="my-thumbnail flight-item">
    <div class="row my-row flight-row">
        <div class="col-sm-2 col-xs-12 airlines">
            <figure>
                <img src="@Model.ThumbnailUrl">
                <figcaption>@Model.Carrier</figcaption>
            </figure>
        </div>
        <div class="col-sm-2 col-xs-6">
            @if (hasVariation)
            {
                <span>@minDeparture - @maxDeparture</span>
            }
            else
            {
                <p>@Model.DepartureDate.Value.DateTime.ToShortDateString()</p>
            }
        </div>
        <div class="col-sm-1 col-xs-6 text-right">
            <p class="flight-number">@Model.FlightNumber</p>
        </div>
        <div class="col-sm-2 col-xs-12">
            <span class="flight-time">@Model.DepartureDate.Value.DateTime.ToString("HH:mm")</span> @departure
        </div>
        <div class="col-sm-2 col-xs-12">
            <p>
                <span class="flight-time">
                    @Model.LandingTime.Value.DateTime.ToString("HH:mm") @if (Model.IsNextDayLanding)
                    {<span>(+1)</span>}
                </span> @landing
            </p>
        </div>
        <div class="col-sm-1 hidden-xs">
            <p class="text-nowrap"><i class="fas fa-plane"></i> @durationTime</p>
        </div>
        <div class="col-sm-2 col-xs-12">
            <div class="row">
                <!-- panel-footer -->
                <div class="col-xs-6">
                    <div class="previous">
                        @if (!Model.IsRoundTrip)
                        {
                            <button class="btn btn-default moreDetails">
                                <i class="fas fa-search-plus"></i>
                                <i class="fas fa-search-minus" style="display: none;"></i>
                            </button>
                        }
                    </div>
                </div>
                <div class="col-xs-6 text-right">
                    <div class="next">
                        @if (!Model.IsRoundTrip)
                        {
                            <button type="submit" id="@selectedFlightId" data-merged-flight-id="@mergedProductId" class="btn pull-right btn-add-cart btn-lg btn-hide"><strong><span class="priceToConvert">@selectedPrice</span></strong></button>
                            <input type="hidden" name="productId" id="productId" value="@selectedFlightId">
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (Model.IsRoundTrip)
    {
        landing = string.IsNullOrEmpty(Model.ReturnDeparture) ? landing : isRus ? Model.ReturnDepartureRus : Model.ReturnDeparture;
        departure = string.IsNullOrEmpty(Model.ReturnLanding) ? departure : isRus ? Model.ReturnLandingRus : Model.ReturnLanding;
        <div class="row my-row flight-row">
            <div class="col-sm-2 col-xs-12 airlines">
                <figure>
                    <img src="@returnThumbnailUrl">
                    <figcaption>@Model.ReturnCarrier</figcaption>
                </figure>
            </div>
            <div class="col-sm-2 col-xs-6">
                @if (hasVariation)
                {
                <span>@minDeparture - @maxDeparture</span>
                }
                else
                {
                    <p>@Model.DepartureDate.Value.DateTime.ToShortDateString()</p>
                }
            </div>
            <div class="col-sm-1 col-xs-6 text-right">
                <p class="flight-number">@Model.ReturnFlightNumber</p>
            </div>
            <div class="col-sm-2 col-xs-12">
                <span class="flight-time">@Model.ReturnDepartureDate.Value.DateTime.ToString("HH:mm")</span> @landing
            </div>
            <div class="col-sm-2 col-xs-12">
                <p>
                    <span class="flight-time">
                        @Model.ReturnLandingTime.Value.DateTime.ToString("HH:mm") @if (Model.ReturnIsNextDayLanding)
                    {<span>(+1)</span>}
                    </span> @departure
                </p>
            </div>
            <div class="col-sm-1 hidden-xs">
                <p class="text-nowrap"><i class="fas fa-plane gly-rotate-left"></i> @returnDurationTime</p>
            </div>
            <div class="col-sm-2  col-xs-12">
                <div class="row">
                    <!-- panel-footer -->
                    <div class="col-xs-6">
                        <div class="previous">
                            <button class="btn btn-default moreDetails">
                                <i class="fas fa-search-plus"></i>
                                <i class="fas fa-search-minus" style="display: none;"></i>
                            </button>
                        </div>
                    </div>
                        <div class="col-xs-6 text-right">
                            <div class="next">
                                <button type="submit" id="@selectedFlightId" data-merged-flight-id="@mergedProductId" class="btn pull-right btn-lg btn-add-cart btn-hide"><strong><span class="priceToConvert">@selectedPrice</span></strong></button>
                                <input type="hidden" name="productId" id="productId" value="@selectedFlightId">
                            </div>
                        </div>
                    </div>
            </div>
        </div>
    }
    <div class="row product-details" style="display: none; transition: max-height 0.3s">
        <div class="col-md-12 col-sm-12">
            @await Html.PartialAsync("~/Modules/SimplCommerce.Module.Catalog/Views/Product/ProductDetail.cshtml", Model.Details)
        </div>
    </div>
</div>

