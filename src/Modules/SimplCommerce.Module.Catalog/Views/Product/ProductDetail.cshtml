@model SimplCommerce.Module.Catalog.ViewModels.ProductDetail

@{
    ViewBag.Title = Model.Name;
}

<div class="product-detail" style="padding-left:15px;padding-right:15px; padding-top:15px">
    <div class="row">
        <div class="col-md-12">
           
            @if (Model.HasVariation)
            {
                <form>
                    <div class="product-attrs">
                        @foreach (var option in Model.AvailableOptions)
                        {
                            <div>
                                <h5>@option.OptionName </h5>
                                <ul class="list-inline product-attr-options" style="font:smaller">
                                    @if (option.OptionName == "Departure Date")
                                    {
                                        var valuesSorted = option.Values.OrderBy(o => Convert.ToDateTime(o, new System.Globalization.CultureInfo("ru-RU", true)));
                                        
                                        @foreach (var value in valuesSorted)
                                        {
                                            var shouldChecked = Model.Variations.First().Options.Any(x => x.Value == value);
                                            var departureDate = Convert.ToDateTime(value, new System.Globalization.CultureInfo("ru-RU", true));

                                            <li>
                                                <input type="radio" value="@value" data-departure="@departureDate.ToShortDateString()" checked="@shouldChecked" name="@option.OptionName" />
                                                <label style="font-size:unset; height:28px">@departureDate.ToShortDateString()</label>
                                            </li>
                                        }
                                    }
                                    @if (option.OptionName == "Package Days")
                                    {
                                        var valuesSorted = option.Values.OrderBy(o => Convert.ToInt32(o));
                                        
                                        @foreach (var value in valuesSorted)
                                        {
                                            var shouldChecked = Model.Variations.First().Options.Any(x => x.Value == value);
                                            
                                            <li>
                                                <input type="radio" value="@value" data-return="@value" checked="@shouldChecked" name="@option.OptionName" />
                                                <label style="font-size:unset; height:28px">@value</label>
                                            </li>
                                        }
                                    }
                                   
                                    @if (option.OptionName == "Class")
                                    {
                                        foreach (var value in option.Values)
                                        {
                                            var shouldChecked = Model.Variations.First().Options.Any(x => x.Value == value);

                                            <li>
                                                <input type="radio" value="@value" checked="@shouldChecked" name="@option.OptionName" />
                                                <label style="font-size:unset; height:28px">@value</label>
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </form>

                foreach (var variant in Model.Variations)
                {
                    var hidden = variant != Model.Variations.First() ? "collapse" : "";
                    <div class="product-variation @hidden" data-variation-name="@variant.NormalizedName">
                        <div class="product-price">
                            @if (variant.IsCallForPricing)
                            {
                                <span class="label label-info">@Localizer["Call for pricing"]</span>
                            }
                            else
                            {
                                <label><span class="priceToConvert">@variant.CalculatedProductPrice.Price</span></label>
                                if (variant.CalculatedProductPrice.PercentOfSaving > 0)
                                {
                                    <p class="product-price-regular">@variant.CalculatedProductPrice.OldPrice.Value.ToString("C")</p>
                                    <p class="product-price-saving">You save (@(variant.CalculatedProductPrice.PercentOfSaving)%)</p>
                                }
                            }
                            (@variant.FlightClass)
                            @variant.DepartureDate.Value.DateTime.ToShortDateString() - 
                            @if (variant.ReturnLandingDate.HasValue)
                            {
                                <span>@variant.ReturnLandingDate.Value.DateTime.ToShortDateString()</span>
                            }
                        </div>
                        @if (variant.StockQuantity <= 0)
                        {
                            <div class="out-of-stock">
                                <span class="label label-danger">@Localizer["Out of stock"]</span>
                            </div>
                        }
                        <div class="add-to-cart">
                            <form class="inline">
                                <input type="hidden" name="productId" value="@variant.Id" />
                                <div class="product-quantity">
                                    <button type="button" style="font-size:smaller" class="quantity-button quantity-button-adult" name="subtract" value="-">-</button>
                                    <input type="text" style="font-size:smaller" class="quantity-field quantity-field-adult" readonly="readonly" name="qty" value="1">
                                    <button type="button" class="quantity-button quantity-button-adult" style="font-size:smaller" name="add" value="+">+ (18+)</button>
                                </div>
                                <div class="product-quantity">
                                    <button type="button" style="font-size:smaller" class="quantity-button quantity-button-child" name="subtract" value="-">-</button>
                                    <input type="text" style="font-size:smaller" class="quantity-field quantity-field-child" readonly="readonly" name="qty" value="1">
                                    <button type="button" class="quantity-button quantity-button-child" style="font-size:smaller" name="add" value="+">+ (2-11)</button>
                                </div>
                                <div class="product-quantity">
                                    <button type="button" style="font-size:smaller" class="quantity-button quantity-button-baby" name="subtract" value="-">-</button>
                                    <input type="text" style="font-size:smaller" class="quantity-field quantity-field-baby" readonly="readonly" name="qty" value="1">
                                    <button type="button" class="quantity-button quantity-button-baby" style="font-size:smaller" name="add" value="+">+ (0-2)</button>
                                </div>
                                <button type="button" style="font-size:smaller"  disabled="@(!variant.IsAllowToOrder || variant.StockQuantity <= 0)" class="btn btn-lg btn-add-cart">@Localizer["Add to cart"]</button>
                            </form>
                        </div>
                    </div>
                }
                <div class="product-variation-notavailable collapse">
                    <span class="label label-danger">Not available</span>
                </div>
            }
            else
            {
                <div class="product-price">
                    @if (Model.IsCallForPricing)
                    {
                        <span class="label label-info">@Localizer["Call for pricing"]</span>
                    }
                    else
                    {
                        <label><span class="priceToConvert">@Model.CalculatedProductPrice.Price</span></label>
                        if (Model.CalculatedProductPrice.PercentOfSaving > 0)
                        {
                            <p class="product-price-regular">@Model.CalculatedProductPrice.OldPrice.Value.ToString("C")</p>
                            <p class="product-price-saving">You save (@(Model.CalculatedProductPrice.PercentOfSaving)%)</p>
                        }
                    }
                </div>
                if (Model.StockQuantity <= 0)
                {
                    <div class="out-of-stock">
                        <span class="label label-danger">@Localizer["Out of stock"]</span>
                    </div>
                }
                <div class="add-to-cart">
                    <form class="inline">
                        <input type="hidden" name="productId" value="@Model.Id" />
                        <div class="product-quantity">
                            <button type="button" style="font-size:smaller" class="quantity-button quantity-button-adult" name="subtract" value="-">-</button>
                            <input type="text" style="font-size:smaller" class="quantity-field quantity-field-adult" readonly="readonly" name="qty" value="1">
                            <button type="button" class="quantity-button quantity-button-adult" style="font-size:smaller" name="add" value="+">+ (18+)</button>
                        </div>
                        <div class="product-quantity">
                            <button type="button" style="font-size:smaller" class="quantity-button quantity-button-child" name="subtract" value="-">-</button>
                            <input type="text" style="font-size:smaller" class="quantity-field quantity-field-child" readonly="readonly" name="qty" value="1">
                            <button type="button" class="quantity-button quantity-button-child" style="font-size:smaller" name="add" value="+">+ (2-11)</button>
                        </div>
                        <div class="product-quantity">
                            <button type="button" style="font-size:smaller" class="quantity-button quantity-button-baby" name="subtract" value="-">-</button>
                            <input type="text" style="font-size:smaller" class="quantity-field quantity-field-baby" readonly="readonly" name="qty" value="1">
                            <button type="button" class="quantity-button quantity-button-baby" style="font-size:smaller" name="add" value="+">+ (0-2)</button>
                        </div>
                        <button type="button" style="font-size:smaller" disabled="@(!Model.IsAllowToOrder || Model.StockQuantity <= 0)" class="btn btn-lg btn-add-cart">@Localizer["Add to cart"]</button>
                    </form>
                </div>
            }
        </div>
    </div>
</div>
